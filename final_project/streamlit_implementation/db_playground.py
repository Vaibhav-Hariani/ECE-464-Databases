##Quick script to populate and test database creation by hammering it with an array
import db_functions
from db_objects import *
PAGE = "http://127.0.0.1:5000"
import random
import string
from wonderwords import RandomWord

##This was generated by gemini at first, and then I completely rewrote it
def add_password():
    """Generates a simple pseudo-random password."""
    random_punct =['!','@','_','$','&','+']
    r = RandomWord()
    passw = r.word(include_parts_of_speech=["verbs"])
    passw += random.choice(random_punct) 
    passw += r.word(include_parts_of_speech=["nouns"])
    passw += random.choice(random_punct)
    return passw


def create_element(element):
    # --- Lists of names for realistic generation ---
    ##These lists are courtesy of Gemini
    first_names = [
        "Olivia",
        "Liam",
        "Emma",
        "Noah",
        "Amelia",
        "Oliver",
        "Ava",
        "Elijah",
        "Sophia",
        "Mateo",
        "Isabella",
        "Lucas",
        "Mia",
        "Levi",
        "Charlotte",
        "Asher",
        "Luna",
        "James",
        "Gianna",
        "Leo",
        "Aurora",
        "Grayson",
        "Harper",
        "Ezra",
        "Evelyn",
        "Luca",
        "Aria",
        "Ethan",
        "Ellie",
        "Aiden",
        "Mila",
    ]
    last_names = [
        "Smith",
        "Johnson",
        "Williams",
        "Brown",
        "Jones",
        "Garcia",
        "Miller",
        "Davis",
        "Rodriguez",
        "Martinez",
        "Hernandez",
        "Lopez",
        "Gonzalez",
        "Wilson",
        "Anderson",
        "Thomas",
        "Taylor",
        "Moore",
        "Martin",
        "Jackson",
        "Lee",
        "Perez",
        "Thompson",
        "White",
        "Harris",
        "Sanchez",
        "Clark",
        "Ramirez",
        "Lewis",
        "Robinson",
        "Walker",
        "Young",
        "Allen",
        "King",
    ]
    fname = random.choice(first_names)
    lname = random.choice(last_names)
    username = fname + "_" + lname
    email = username + "@copperonion.edu"
    element["name"] = fname + " " + lname
    element["uname"] = username
    element["email"] = email
    element["pass"] = add_password()

def populate_students(NUM_STUDENTS=21):
    for i in range(NUM_STUDENTS):
        element = {"obj_class": "student"}
        create_element(element)
        response = db_functions.create_user(element)
        print(response)

def login_test(student: StudentData):
    print(student)
    subject_creds = db_functions.get_login(student.id, "student")
    print(subject_creds)
    new_pass = subject_creds.password + '@'
    print(db_functions.login(subject_creds.uname, subject_creds.password))
    print(db_functions.login(subject_creds.uname, new_pass))

def populate_professors():
    element = {"obj_class": "professor"}
    ##Starting with just two professors
    fname = "Deli"
    lname = "Katz"
    username = fname + "_" + lname
    email = username + "@copperonion.edu"
    element["name"] = fname + " " + lname
    element["uname"] = username
    element["email"] = email
    element["pass"] = add_password()
    db_functions.create_user(element)
    fname = "NH"
    lname = "Keene"
    username = fname + "_" + lname

    email = username + "@copperonion.edu"
    element["name"] = fname + " " + lname
    element["uname"] = username
    element["email"] = email
    element["pass"] = add_password()
    db_functions.create_user(element)

if __name__ == "__main__":
    # populate_students()
    Students = db_functions.table_loader("Student")
    # populate_professors()
    Professors = db_functions.table_loader("Professor")
    for prof in Professors:
        print(prof)
        login = db_functions.get_login(prof.id, "professor")
        print(login.id)
    login_test(Students[-1])
    print("Done printing students")